using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Microsoft.Office.Interop.Excel;
using NeuroSky.ThinkGear;
using NeuroSky.ThinkGear.Algorithms;

namespace MindWaveExperimentRecorder.CSCExperimentor
{
    class MindwaveExperiment
    {
        List<TypedDataPoint<int>> _concentrationReadings;
        List<TypedDataPoint<int>> _relaxationReadings;

        int _id;

        public MindwaveExperiment(int id)
        {
            _id = id;
            _concentrationReadings = new List<TypedDataPoint<int>>();
            _relaxationReadings = new List<TypedDataPoint<int>>();
        }

        /// <summary>
        /// Records a new datapoint for concentration
        /// </summary>
        public void addConcentration(TypedDataPoint<int> input)
        {
            _concentrationReadings.Add(input);
        }

        /// <summary>
        /// Records a new datapoint for relaxation
        /// </summary>
        public void addRelaxation(TypedDataPoint<int> input)
        {
            _relaxationReadings.Add(input);
        }

        /// <summary>
        /// Populates the worksheet with the data being held in this experiment
        /// </summary>
        /// <param name="ws"></param>
        public virtual void populateWorksheet(Worksheet ws)
        {
            ws.Cells[1, 1] = "Experiment " + _id;

            addDataListToWorksheet(_concentrationReadings, "Concentration", 2, 1, ws);
            addDataListToWorksheet(_concentrationReadings, "Relaxation", 2, 4, ws);
        }

        /// <summary>
        /// Adds the data list to the parameter worksheet, listing the values in columns
        /// Format is Title /n TimeStamp /t Value
        /// </summary>
        /// <param name="input">Input to add</param>
        /// <param name="title">Title for the input</param>
        /// <param name="startRow">What row to start writing from</param>
        /// <param name="startColumn">What column to start writing from</param>
        /// <param name="ws">Where the data is going</param>
        protected void addDataListToWorksheet(List<TypedDataPoint<int>> input, string title, int startRow, int startColumn, Worksheet ws)
        {
            ws.Cells[startRow, startColumn] = title;
            ws.Cells[startRow + 1, startColumn] = "Time Stamp";
            ws.Cells[startRow + 1, startColumn + 1] = "Value";

            for (int i = 0; i < input.Count; i++)
            {
                ws.Cells[startRow + 2 + i, startColumn] = input[i].TimeStamp;
                ws.Cells[startRow + 2 + i, startColumn + 1] = input[i].Value;
            }
        }
    }

    class CSCExperimentManager : IExperimentManager
    {
#region Variables
        List<MindwaveExperiment> _experiments;
        MindwaveExperiment _activeExperiment;

        Participant _curParticipant;

        bool _recordData = false;

        IExperimentorView _view;

        Microsoft.Office.Interop.Excel.Application _xlApp;
#endregion

        public CSCExperimentManager(IExperimentorView view)
        {
            _experiments = new List<MindwaveExperiment>();
            _view = view;

            _xlApp = new Application();
            if (_xlApp == null)
            {
                _view.addLogMessage("Excel is not properly installed, cannot save experiments");
            }
        }

        ~CSCExperimentManager()
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(_xlApp);
                _xlApp = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error releasing xml app: " + ex);
            }
        }

        /// <summary>
        /// Saves all the experiments in the experiments list, to an autogenerated file based off the participant
        /// </summary>
        void saveExperiments()
        {
            exportAllExperiments(_curParticipant.Name + DateTime.Now.ToString());
        }

        /// <summary>
        /// Resets the experiments and participant
        /// </summary>
        void reset()
        {
            _activeExperiment = null;
            _experiments.Clear();
            _recordData = false;
            _curParticipant = new Participant("Unnamed", Participant.ExperienceLevels.None);
        }

        #region IExperimentManager methods

        public void setNewParticipant(string name, Participant.ExperienceLevels level, bool autoSaveExperiments = true)
        {
            if (autoSaveExperiments == true)
            {
                saveExperiments();
            }

            _curParticipant = new Participant(name, level);
        }

        public void startNewExperiment(int id)
        {
            MindwaveExperiment newExp = new MindwaveExperiment(id);
            _activeExperiment = newExp;
            _experiments.Add(_activeExperiment);

            _recordData = true;
        }

        public void recordPoint(DataPoint point, string id)
        {
            if (_activeExperiment == null)
                _view.addLogMessage("Cannot record point " + id + ": no active experiment running");

            else
            {
                switch (id)
                {
                    case "concentration":
                        _activeExperiment.addConcentration(point as TypedDataPoint<int>);
                        break;
                    case "relaxation":
                        _activeExperiment.addRelaxation(point as TypedDataPoint<int>);
                        break;

                }
            }
        }

        public void setRecordData(bool state)
        {
            _recordData = state;
        }

        public void exportAllExperiments(String filePath)
        {
            //1st sheet should be about the participant
            Workbook workBook = _xlApp.Workbooks.Add(XlWBATemplate.xlWBATWorksheet);

            //future sheets are about each experiment
            foreach (MindwaveExperiment loopedExperiment in _experiments)
            {
                Worksheet loopedSheet = workBook.Worksheets.Add();
                loopedExperiment.populateWorksheet(loopedSheet);
            }

            workBook.SaveAs(filePath + ".xls");
        }

        #endregion
    }
}
